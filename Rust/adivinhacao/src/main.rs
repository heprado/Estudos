use std::io;
use std::cmp::Ordering;
use rand::Rng;
use std::{thread, time};

fn main() {

    let numero = rand::thread_rng() // Gera um nÃºmero aleatÃ³rio utilizando o tempo local da thread que estÃ¡ rodando.
    .gen_range(1..=u128::MAX);

    let mut tentativas = 10;
    //Titulo


    println!("Adivinhe o nÃºmero entre 1 e {} ",u128::MAX);

    //Roda infinitamente.
    loop {

        if tentativas < 1 {

            print!("\x1Bc");
            println!("\x1b[31mAcabou pra vocÃª.\x1b[0m");
            println!("O nÃºmero era \x1b[32m{}\x1b[0m",numero);
            thread::sleep(time::Duration::from_millis(2000));
            break;
        }

        //Printa na tela e pula uma linha
        // \x1b[32m Ã© verde.
        // \x1b[0m Ã© RESETAR A COR.
        println!("\nPor favor insira sua escolha e aperte \x1b[32mEnter\x1b[0m");

        //Let cria uma variÃ¡vel que sÃ³ existe neste escopo
        //essa variÃ¡vel Ã© mutÃ¡vel por conta do mut
        //todas as variÃ¡veis em Rust sÃ£o imutÃ¡veis por padrÃ£o.
        //Imutabilidade sendo o valor dela poder ser alterado.
        //new() Ã© uma funÃ§Ã£o implementada no Tipo String
        let mut escolha = String::new();

        
        //ComeÃ§a a ler o STDIN.
        io::stdin()
            .read_line(&mut escolha) //Passando a escolha por refÃªrencia (mutÃ¡vel) para o readline
            .expect("Erro ao ler a linha.");

        //Pega a string do resultado, remove os espaÃ§os em branco e transforma a string em um u32, sempre o tipo que vocÃª definir na variÃ¡vel que serÃ¡ o tipo que o parse tentarÃ¡ transformar.
        //Parse retorna um Result<Ok, Err>
        let escolha: u128 = match escolha.trim().parse() {
            //Pega o valor retornado caso tenha sido OK. 
            Ok(num) => num, 
            //Fala que deve ser um nÃºmero para qualquer(isso que o underline faz) erro que acontecer
            Err(_) => {
                print!("\x1Bc");

                println!("\x1b[31mDigite um nÃºmero atÃ© {}\x1b[0m",u128::MAX);
                println!();
                println!("\x1b[33mVocÃª tem {} tentativas\x1b[0m",tentativas);
                continue 
            }, 
        };



        //Passa o nÃºmero por refÃªrencia para comparar com a escolha, utilizando o mÃ©todo cmp do u32;
        match escolha.cmp(&numero) {

            //Menor
            Ordering::Less => {
                tentativas -= 1;
                print!("\x1Bc");
                println!("\x1b[33mVocÃª tem {} tentativas\x1b[0m",tentativas);
                println!("\n\x1b[36mNÃºmero Ã© maior\x1b[0m ğŸ˜Œ");

            },
            //Maior
            Ordering::Greater => {
                tentativas -= 1;
                print!("\x1Bc");
                println!("\x1b[33mVocÃª tem {} tentativas\x1b[0m",tentativas);
                println!("\x1b[31mNÃºmero Ã© muito grande\x1b[0m ğŸ˜¨");
            },
            //Igual
            Ordering::Equal =>  {
                print!("\x1Bc");
                println!("\n\x1b[35mVocÃª acertou!!!\x1b[0m ğŸ¤‘ğŸ¤‘ğŸ¤‘");

                
                // Aguarda 10segundos antes de sair
                thread::sleep(time::Duration::from_millis(2000));
                // Sai do programa caso acerte.
                break; 
                
            }
        }
    
    }
    

}