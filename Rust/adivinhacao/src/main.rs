use std::io;
use std::cmp::Ordering;
use rand::Rng;
use std::{thread, time};

fn main() {

    let numero = rand::thread_rng() // Gera um n√∫mero aleatorio utilizando o tempo local da thread que est√° rodando.
    .gen_range(1..=1000); //N√∫mero de 1 at√© 1000
    
    //Titulo
    println!("Adivinhe o n√∫mero!");

    //Roda infitamente.
    loop {

        //Printa na tela e pula uma linha
        // \x1b[32m √© verde.
        // \x1b[0m √© RESETAR A COR.
        println!("\nPor favor insira sua escolha e aperte \x1b[32m Enter \x1b[0m");

        //Let cria uma variavel que s√≥ existe neste escopo
        //essa variavel √© mutavel por conta do mut
        //todas as variaveis em Rust s√£o imutaveis por padr√£o.
        //Imutabilidade sendo o valor dela poder ser alterado.
        //new() √© uma fun√ß√£o implementada no Tipo String
        let mut escolha = String::new();

        
        //Come√ßa a ler o STDIN.
        io::stdin()
            .read_line(&mut escolha) //Passando a escolha por referencia (mutavel) para o readline
            .expect("Erro ao ler a linha.");

        //Pega a string do resultado, remove os espa√ßos em branco e transforma a string em um u32, sempre o tipo que voc√™ definir na vari√°vel que ser√° o tipo que o parse tentar√° transformar.
        //Parse retorna um Result<Ok,Err>
        let escolha: u32 = match escolha.trim().parse() {
            //Pega o valor retornado caso tenha sido OK. 
            Ok(num) => num, 
            //Fala que deve ser um n√∫mero para qualquer(isso que o underline faz) erro que acontencer
            Err(_) => { 
                println!("\x1b[33mDigite um n√∫mero \x1b[0m"); 
                continue 
            }, 
        };
        
        //Passa o numero por referencia para comparar com a escolha, utilizando o metodo cmp do u32;
        match escolha.cmp(&numero) {

            //Menor
            Ordering::Less => println!("\n\x1b[36mN√∫mero √© maior\x1b[0m üòå"),
            //Maior
            Ordering::Greater => println!("\x1b[31mN√∫mero √© muito grande\x1b[0m üò®"),
            //Igual
            Ordering::Equal =>  { 
                println!("\n\x1b[35mVoc√™ acertou!!!\x1b[0m ü§ëü§ëü§ë");

                
                // Aguarda 10segundos antes de sair
                thread::sleep(time::Duration::from_millis(10000));
                // Sai do programa caso acerte.
                break; 
                
            }
        }
    
    }
    

}